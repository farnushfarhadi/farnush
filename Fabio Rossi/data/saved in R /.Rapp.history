geneTree
load("/Users/farnush/Documents/Farnush github/Fabio Rossi/WGCNA/data/HumanChimp-OldhamAnalysis-colorHuman-colorChimp-inNetwork.RData")
dim (datExpr)
rownames (datEpr) %>% heas
rownames (datEpr) %>% head
rownames (datExpr) %>% head
colnames (datExpr) %>% head
head (datExpr [ 1:10 , 1:10])
setwd("~/Documents/Farnush github/Fabio Rossi/data/saved in R /")#
load (file = "EC_WT.RData")#
load (file = "EC_damaged.RData")
EC_all <- cbind (EC_WT , EC_damaged [ , - c(1,2)])#
filterLowExpressedGenes(logTransform(EC_all) , 0.7 , 1) -> EC_all_log_filtered
sapply(EC_all_log_filtered$tracking_id %>% unique() %>% as.character(), function(x) {which (EC_all_log_filtered$tracking_id == x)} ) -> hh #
k = c()#
for (i in 1:length(hh))#
{#
  k = c(k , hh[[i]][1])#
}#
# remove dupliated rows#
EC_wt_expr <- EC_all_log_filtered [ k, 3:dim(EC_WT)[2]] # 8711 14#
EC_damaged_expr <- EC_all_log_filtered [ k, - c(1:dim(EC_WT)[2])] # 8711 8#
#
rownames(EC_wt_expr ) <- EC_all_log_filtered$tracking_id %>% as.character() %>% unique()#
colnames(EC_wt_expr) <- EC_all_log_filtered %>% colnames(EC_all_log_filtered) [3:dim(EC_WT)[2]]#
rownames(EC_damaged_expr ) <- EC_all_log_filtered$tracking_id %>% as.character() %>% unique()#
colnames(EC_damaged_expr) <- EC_all_log_filtered %>% colnames(EC_all_log_filtered) [( - c(1:dim(EC_WT)[2]))]#
#
EC_wt_expr <- as.data.frame(t(EC_wt_expr) )#
EC_damaged_expr <- as.data.frame(t(EC_damaged_expr))
powers = c(c(1:10), seq(from = 12, to=20, by=2))#
# Call the network topology analysis function#
#
sft_EC_wt = pickSoftThreshold(EC_wt_expr, powerVector = powers, verbose = 5)
plot_networkTopology <- function (sft)#
{#
  # Plot the results:#
  sizeGrWindow(9, 5)#
  par(mfrow = c(1,2));#
  cex1 = 0.9;#
  # Scale-free topology fit index as a function of the soft-thresholding power#
  plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],#
       xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",#
       main = paste("Scale independence"));#
  text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],#
       labels=powers,cex=cex1,col="red");#
  # this line corresponds to using an R^2 cut-off of h#
  abline(h=0.90,col="red")#
  # Mean connectivity as a function of the soft-thresholding power#
  plot(sft$fitIndices[,1], sft$fitIndices[,5],#
       xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",#
       main = paste("Mean connectivity"))#
  text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")#
}
plot_networkTopology (sft_EC_wt)
sft_EC_damaged = pickSoftThreshold(EC_damaged_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft= sft_EC_damaged)
powers = c (1:10 , seq(from = 12 , to = 30 , by =2))
sft_EC_damaged = pickSoftThreshold(EC_damaged_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft= sft_EC_damaged)
plot_networkTopology (sft= sft_EC_damaged)
plot_networkTopology (sft= sft_EC_wt)
powers = c (1:10 , seq(from = 12 , to = 50 , by =2))
sft_EC_damaged = pickSoftThreshold(EC_damaged_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft= sft_EC_damaged)
plot_networkTopology <- function (sft)#
{#
  # Plot the results:#
  sizeGrWindow(9, 5)#
  par(mfrow = c(1,2));#
  cex1 = 0.9;#
  # Scale-free topology fit index as a function of the soft-thresholding power#
  plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],#
       xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",#
       main = paste("Scale independence"));#
  text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],#
       labels=powers,cex=cex1,col="red");#
  # this line corresponds to using an R^2 cut-off of h#
  abline(h=0.8,col="red")#
  # Mean connectivity as a function of the soft-thresholding power#
  plot(sft$fitIndices[,1], sft$fitIndices[,5],#
       xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",#
       main = paste("Mean connectivity"))#
  text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")#
}
plot_networkTopology (sft= sft_EC_damaged)
plot_networkTopology <- function (sft)#
{#
  # Plot the results:#
  sizeGrWindow(9, 5)#
  par(mfrow = c(1,2));#
  cex1 = 0.9;#
  # Scale-free topology fit index as a function of the soft-thresholding power#
  plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],#
       xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",#
       main = paste("Scale independence"));#
  text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],#
       labels=powers,cex=cex1,col="red");#
  # this line corresponds to using an R^2 cut-off of h#
  abline(h=0.85,col="red")#
  # Mean connectivity as a function of the soft-thresholding power#
  plot(sft$fitIndices[,1], sft$fitIndices[,5],#
       xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",#
       main = paste("Mean connectivity"))#
  text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")#
}
plot_networkTopology (sft= sft_EC_damaged)
sft_EC_wt = pickSoftThreshold(EC_wt_expr, powerVector = powers, verbose = 5)#
sft_EC_damaged = pickSoftThreshold(EC_damaged_expr, powerVector = powers, verbose = 5)
powers = c(c(1:10), seq(from = 12, to=30, by=2))#
# Call the network topology analysis function#
#
sft_EC_wt = pickSoftThreshold(EC_wt_expr, powerVector = powers, verbose = 5)#
sft_EC_damaged = pickSoftThreshold(EC_damaged_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_EC_wt)
plot_networkTopology (sft_EC_damaged)
plot_networkTopology (sft_EC_wt)
plot_networkTopology (sft_EC_damaged)
plot_networkTopology (sft_EC_wt)
net_EC_wt = blockwiseModules(EC_wt_expr, power = 14,#
                       TOMType = "unsigned", minModuleSize = 30,#
                       reassignThreshold = 0, mergeCutHeight = 0.25,#
                       numericLabels = TRUE, pamRespectsDendro = FALSE,#
                       saveTOMs = TRUE,#
                       saveTOMFileBase = "femaleMouseTOM", #
                       verbose = 3)
clusteringDendogramGenes <- function(net)#
{#
  # open a graphics window#
  sizeGrWindow(12, 9)#
  # Convert labels to colors for plotting#
  mergedColors = labels2colors(net$colors)#
  # Plot the dendrogram and the module colors underneath#
  plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],#
                      "Module colors",#
                      dendroLabels = FALSE, hang = 0.03,#
                      addGuide = TRUE, guideHang = 0.05)#
}
clusteringDendogramGenes (net_EC_wt)
net_EC_damaged = blockwiseModules(sft_EC_damaged, power = 22, TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25,#
                             numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = "femaleMouseTOM", verbose = 3)
net_EC_damaged = blockwiseModules(sft_EC_damaged, power = 22, TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25,#
                             numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = "femaleMouseTOM", verbose = 3)
dim (sft_EC_damaged)
net_EC_damaged = blockwiseModules(EC_damaged_expr, power = 22, TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25,#
                             numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = "femaleMouseTOM", verbose = 3)
plot_networkTopology(net_EC_damaged)
clusteringDendogramGenes(net_EC_damaged)
saveIt (net_EC_wt , "../../WGCNA/EC_wt_network.RData")#
saveIt (net_EC_damaged , "../../WGCNA/EC_damaged_network.RData")
saveIt <- function(net , file)#
{#
  moduleLabels = net$colors#
  moduleColors = labels2colors(net$colors)#
  MEs = net$MEs;#
  geneTree = net$dendrograms[[1]];#
  save(MEs, moduleLabels, moduleColors, geneTree, #
       file = file)#
}
saveIt (net_EC_wt , "../../WGCNA/EC_wt_network.RData")#
saveIt (net_EC_damaged , "../../WGCNA/EC_damaged_network.RData")
x = load("../../WGCNA/EC_wt_network.RData")#
color_EC_wt <- moduleColors#
x = load("../../WGCNA/EC_damaged_network.RData")#
color_EC_damaged <- moduleColors#
colorList = list(color_EC_wt, color_EC_damaged);#
names(colorList) = setLabels;
nSets = 2;#
multiExpr = list();#
multiExpr[[1]] = list(data = EC_wt_expr);#
multiExpr[[2]] = list(data = EC_damaged_expr);#
setLabels = c("EC_WT", "ECC_CCR2_KO");#
names(multiExpr) = setLabels#
#
x = load("../../WGCNA/EC_wt_network.RData")#
color_EC_wt <- moduleColors#
x = load("../../WGCNA/EC_damaged_network.RData")#
color_EC_damaged <- moduleColors#
colorList = list(color_EC_wt, color_EC_damaged);#
names(colorList) = setLabels;
system.time( {#
  mp_EC = modulePreservation(multiExpr, colorList,referenceNetworks = c(1:2),loadPermutedStatistics = FALSE,nPermutations = 200,verbose = 3)#
});
warnings()
ref = 1#
test = 2#
statsObs = cbind(mp_EC$quality$observed[[ref]][[test]][, -1], mp_EC$preservation$observed[[ref]][[test]][, -1])#
statsZ = cbind(mp_EC$quality$Z[[ref]][[test]][, -1], mp_EC$preservation$Z[[ref]][[test]][, -1]);
print( cbind(statsObs[, c("medianRank.pres", "medianRank.qual")],#
signif(statsZ[, c("Zsummary.pres", "Zsummary.qual")], 2)) )
mp = mp_EC
# Module labels and module sizes are also contained in the results#
modColors = rownames(mp$preservation$observed[[ref]][[test]])#
moduleSizes = mp$preservation$Z[[ref]][[test]][, 1];#
# leave grey and gold modules out#
plotMods = !(modColors %in% c("grey", "gold"));#
# Text labels for points#
text = modColors[plotMods];#
# Auxiliary convenience variable#
plotData = cbind(mp$preservation$observed[[ref]][[test]][, 2], mp$preservation$Z[[ref]][[test]][, 2])#
# Main titles for the plot#
mains = c("Preservation Median rank", "Preservation Zsummary");#
# Start the plot#
sizeGrWindow(10, 5);#
#pdf(fi="Plots/BxHLiverFemaleOnly-modulePreservation-Zsummary-medianRank.pdf", wi=10, h=5)#
par(mfrow = c(1,2))#
par(mar = c(4.5,4.5,2.5,1))#
for (p in 1:2)#
{#
min = min(plotData[, p], na.rm = TRUE);#
max = max(plotData[, p], na.rm = TRUE);#
# Adjust ploting ranges appropriately#
if (p==2)#
{#
if (min > -max/10) min = -max/10#
ylim = c(min - 0.1 * (max-min), max + 0.1 * (max-min))#
} else#
ylim = c(max + 0.1 * (max-min), min - 0.1 * (max-min))#
plot(moduleSizes[plotMods], plotData[plotMods, p], col = 1, bg = modColors[plotMods], pch = 21,#
main = mains[p],#
cex = 2.4,#
ylab = mains[p], xlab = "Module size", log = "x",#
ylim = ylim,#
xlim = c(10, 2000), cex.lab = 1.2, cex.axis = 1.2, cex.main =1.4)#
labelPoints(moduleSizes[plotMods], plotData[plotMods, p], text, cex = 1, offs = 0.08);#
# For Zsummary, add threshold lines#
if (p==2)#
{#
abline(h=0)#
abline(h=2, col = "blue", lty = 2)#
abline(h=10, col = "darkgreen", lty = 2)#
}#
}#
# If plotting into a file, close it#
dev.off();
# Module labels and module sizes are also contained in the results#
modColors = rownames(mp$preservation$observed[[ref]][[test]])#
moduleSizes = mp$preservation$Z[[ref]][[test]][, 1];#
# leave grey and gold modules out#
plotMods = !(modColors %in% c("grey", "gold"));#
# Text labels for points#
text = modColors[plotMods];#
# Auxiliary convenience variable#
plotData = cbind(mp$preservation$observed[[ref]][[test]][, 2], mp$preservation$Z[[ref]][[test]][, 2])#
# Main titles for the plot#
mains = c("Preservation Median rank", "Preservation Zsummary");#
# Start the plot#
sizeGrWindow(10, 5);#
#pdf(fi="Plots/BxHLiverFemaleOnly-modulePreservation-Zsummary-medianRank.pdf", wi=10, h=5)#
par(mfrow = c(1,2))#
par(mar = c(4.5,4.5,2.5,1))#
for (p in 1:2)#
{#
min = min(plotData[, p], na.rm = TRUE);#
max = max(plotData[, p], na.rm = TRUE);#
# Adjust ploting ranges appropriately#
if (p==2)#
{#
if (min > -max/10) min = -max/10#
ylim = c(min - 0.1 * (max-min), max + 0.1 * (max-min))#
} else#
ylim = c(max + 0.1 * (max-min), min - 0.1 * (max-min))#
plot(moduleSizes[plotMods], plotData[plotMods, p], col = 1, bg = modColors[plotMods], pch = 21,#
main = mains[p],#
cex = 2.4,#
ylab = mains[p], xlab = "Module size", log = "x",#
ylim = ylim,#
xlim = c(10, 2000), cex.lab = 1.2, cex.axis = 1.2, cex.main =1.4)#
labelPoints(moduleSizes[plotMods], plotData[plotMods, p], text, cex = 1, offs = 0.08);#
# For Zsummary, add threshold lines#
if (p==2)#
{#
abline(h=0)#
abline(h=2, col = "blue", lty = 2)#
abline(h=10, col = "darkgreen", lty = 2)#
}#
}#
# If plotting into a file, close it#
dev.off();
# Module labels and module sizes are also contained in the results#
modColors = rownames(mp$preservation$observed[[ref]][[test]])#
moduleSizes = mp$preservation$Z[[ref]][[test]][, 1];#
# leave grey and gold modules out#
plotMods = !(modColors %in% c("grey", "gold"));#
# Text labels for points#
text = modColors[plotMods];#
# Auxiliary convenience variable#
plotData = cbind(mp$preservation$observed[[ref]][[test]][, 2], mp$preservation$Z[[ref]][[test]][, 2])#
# Main titles for the plot#
mains = c("Preservation Median rank", "Preservation Zsummary");#
# Start the plot#
sizeGrWindow(10, 5);#
#pdf(fi="Plots/BxHLiverFemaleOnly-modulePreservation-Zsummary-medianRank.pdf", wi=10, h=5)#
par(mfrow = c(1,2))#
par(mar = c(4.5,4.5,2.5,1))#
for (p in 1:2)#
{#
min = min(plotData[, p], na.rm = TRUE);#
max = max(plotData[, p], na.rm = TRUE);#
# Adjust ploting ranges appropriately#
if (p==2)#
{#
if (min > -max/10) min = -max/10#
ylim = c(min - 0.1 * (max-min), max + 0.1 * (max-min))#
} else#
ylim = c(max + 0.1 * (max-min), min - 0.1 * (max-min))#
plot(moduleSizes[plotMods], plotData[plotMods, p], col = 1, bg = modColors[plotMods], pch = 21,#
main = mains[p],#
cex = 2.4,#
ylab = mains[p], xlab = "Module size", log = "x",#
ylim = ylim,#
xlim = c(10, 2000), cex.lab = 1.2, cex.axis = 1.2, cex.main =1.4)#
labelPoints(moduleSizes[plotMods], plotData[plotMods, p], text, cex = 1, offs = 0.08);#
# For Zsummary, add threshold lines#
if (p==2)#
{#
abline(h=0)#
abline(h=2, col = "blue", lty = 2)#
abline(h=10, col = "darkgreen", lty = 2)#
}#
}#
# If plotting into a file, close it
# Module labels and module sizes are also contained in the results#
modColors = rownames(mp$preservation$observed[[ref]][[test]])#
moduleSizes = mp$preservation$Z[[ref]][[test]][, 1];#
# leave grey and gold modules out#
plotMods = !(modColors %in% c("grey", "gold"));#
# Text labels for points#
text = modColors[plotMods];#
# Auxiliary convenience variable#
plotData = cbind(mp$preservation$observed[[ref]][[test]][, 2], mp$preservation$Z[[ref]][[test]][, 2])#
# Main titles for the plot#
mains = c("Preservation Median rank", "Preservation Zsummary");#
# Start the plot#
sizeGrWindow(10, 5);#
#pdf(fi="Plots/BxHLiverFemaleOnly-modulePreservation-Zsummary-medianRank.pdf", wi=10, h=5)#
par(mfrow = c(1,2))#
par(mar = c(4.5,4.5,2.5,1))#
for (p in 1:2)#
{#
min = min(plotData[, p], na.rm = TRUE);#
max = max(plotData[, p], na.rm = TRUE);#
# Adjust ploting ranges appropriately#
if (p==2)#
{#
if (min > -max/10) min = -max/10#
ylim = c(min - 0.1 * (max-min), max + 0.1 * (max-min))#
} else#
ylim = c(max + 0.1 * (max-min), min - 0.1 * (max-min))#
plot(moduleSizes[plotMods], plotData[plotMods, p], col = 1, bg = modColors[plotMods], pch = 21,#
main = mains[p],#
cex = 2.4,#
ylab = mains[p], xlab = "Module size", log = "x",#
ylim = ylim,#
xlim = c(10, 2000), cex.lab = 1.2, cex.axis = 1.2, cex.main =1.4)#
labelPoints(moduleSizes[plotMods], plotData[plotMods, p], text, cex = 1, offs = 0.08);#
# For Zsummary, add threshold lines#
if (p==2)#
{#
abline(h=0)#
abline(h=2, col = "blue", lty = 2)#
abline(h=10, col = "darkgreen", lty = 2)#
}#
}#
# If plotting into a file, close it
length (colorList)
colorList[[1]] %>% length
colorList[[1]] %>% unique() %>% length
which (colorList[[1]] == "magenta")
which (colorList[[1]] == "magenta") -> magenta_genes
colnames (EC_damaged_expr ) [ magenta_genes] -> genes
head (genes)
write.table (genes, file = "../../WGCNA/magenta_genes_EC.txt" , sep = "\t")
write.table (genes, file = "../../WGCNA/magenta_genes_EC.txt" , sep = "\t" , row.names=FALSE)
write.table (genes, file = "../../WGCNA/magenta_genes_EC.txt" , sep = "\t" , row.names=FALSE , col.names=FALSE)
which (colorList[[1]] == "turquoise") -> turquoise_genes
colnames (EC_damaged_expr ) [ turquoise_genes] -> genes
write.table (genes, file = "../../WGCNA/turquoise_genes_EC.txt" , sep = "\t" , row.names=FALSE , col.names=FALSE)
length(genes)
(which (colorList[[1]] == "black") -> turquoise_genes ) %>% length
(which (colorList[[1]] == "brown") -> turquoise_genes ) %>% length
(which (colorList[[1]] == "blue") -> turquoise_genes ) %>% length
(which (colorList[[1]] == x) -> turquoise_genes ) %>% length
x = "greenyellow"
(which (colorList[[1]] == x) -> turquoise_genes ) %>% length
x = "greeny"
x = "green"
(which (colorList[[1]] == x) -> turquoise_genes ) %>% length
x = "red"
(which (colorList[[1]] == x) -> turquoise_genes ) %>% length
x = "puplesalmon"
(which (colorList[[1]] == x) -> turquoise_genes ) %>% length
x = "purplesalmon"
(which (colorList[[1]] == x) -> turquoise_genes ) %>% length
x = "purple"
(which (colorList[[1]] == x) -> turquoise_genes ) %>% length
x = "greenyellow"
(which (colorList[[1]] == x) -> gy_genes ) %>% length
colnames (EC_damaged_expr ) [ gy_genes] -> genes
write.table (genes, file = "../../WGCNA/gy_genes_EC.txt" , sep = "\t" , row.names=FALSE , col.names=FALSE)
corAverage <- function (table  , genes , z)#
{#
  n = length(genes)#
  sapply(genes,function(x) {which (table$tracking_id == x)})  -> c_idx#
  if (z)#
  { ### NOTE: It does not matter if you normalize or not. cor is same #
    t = table [ , -c(1,2)] %>% as.matrix() #
    cluster.means <- apply(t, 1, mean)#
    cluster.stdevs <- apply(t, 1, sd)#
    for (i in 1:dim (t)[1])#
    {#
      t[i,] <-  (t[i,] - cluster.means[i]) / cluster.stdevs[i]#
    }#
    colnames(t) = colnames(table)[-c(1,2)]#
    table = cbind (table [ , c(1,2)] , t)#
  }#
#
  cor (t(as.matrix(table[Reduce(union , c_idx) , -c(1,2)]) )) %>% round(4) -> cor_scores#
  avg_cor <- (cor_scores[lower.tri(cor_scores)] %>% sum() ) / (n * (n-1) )#
  return (avg_cor)#
}
length(magenta_genes)
corAverage ( EC_wt_expr, magenta_genes , 0)
dim (EC_wt_expr)
EC_wt_expr_NOTt <- EC_all_log_filtered [ k, 3:dim(EC_WT)[2]]
EC_damaged_expr_NOTt <- EC_all_log_filtered [ k, - c(1:dim(EC_WT)[2])]
corAverage ( EC_wt_expr_NOTt, magenta_genes , 0)
dim (EC_wt_expr_NOTt)
typeof(EC_wt_expr_NOTt)
save (sft_EC_wt , file = "../../WGCNA/sft_EC_wt.RData")
save (sft_EC_damaged , file = "../../WGCNA/sft_EC_ko.RData")
net_EC_wt$colors %>% length
save (net_EC_wt , file = "net_EC_wt.RData")
save (net_EC_wt , file = "../../WGCNA/net_EC_wt.RData")
save (net_EC_damaged , file = "../../WGCNA/net_EC_ko.RData")
save (mp_EC , file = "../../WGCNA/EC_mp.RData")
mp = mp_EC
ref = 2#
test = 1#
statsObs = cbind(mp$quality$observed[[ref]][[test]][, -1], mp$preservation$observed[[ref]][[test]][, -1])#
statsZ = cbind(mp$quality$Z[[ref]][[test]][, -1], mp$preservation$Z[[ref]][[test]][, -1]);#
# Compare preservation to quality:#
print( cbind(statsObs[, c("medianRank.pres", "medianRank.qual")],#
             signif(statsZ[, c("Zsummary.pres", "Zsummary.qual")], 2)) )#
# Module labels and module sizes are also contained in the results#
modColors = rownames(mp$preservation$observed[[ref]][[test]])#
moduleSizes = mp$preservation$Z[[ref]][[test]][, 1];#
# leave grey and gold modules out#
plotMods = !(modColors %in% c("grey", "gold"));#
# Text labels for points#
text = modColors[plotMods];#
# Auxiliary convenience variable#
plotData = cbind(mp$preservation$observed[[ref]][[test]][, 2], mp$preservation$Z[[ref]][[test]][, 2])#
# Main titles for the plot#
mains = c("Preservation Median rank", "Preservation Zsummary");#
# Start the plot#
sizeGrWindow(10, 5);#
#pdf(fi="Plots/BxHLiverFemaleOnly-modulePreservation-Zsummary-medianRank.pdf", wi=10, h=5)#
par(mfrow = c(1,2))#
par(mar = c(4.5,4.5,2.5,1))#
for (p in 1:2)#
{#
  min = min(plotData[, p], na.rm = TRUE);#
  max = max(plotData[, p], na.rm = TRUE);#
  # Adjust ploting ranges appropriately#
  if (p==2)#
  {#
    if (min > -max/10) min = -max/10#
    ylim = c(min - 0.1 * (max-min), max + 0.1 * (max-min))#
  } else#
    ylim = c(max + 0.1 * (max-min), min - 0.1 * (max-min))#
  plot(moduleSizes[plotMods], plotData[plotMods, p], col = 1, bg = modColors[plotMods], pch = 21,#
       main = mains[p],#
       cex = 2.4,#
       ylab = mains[p], xlab = "Module size", log = "x",#
       ylim = ylim,#
       xlim = c(10, 2000), cex.lab = 1.2, cex.axis = 1.2, cex.main =1.4)#
  labelPoints(moduleSizes[plotMods], plotData[plotMods, p], text, cex = 1, offs = 0.08);#
  # For Zsummary, add threshold lines#
  if (p==2)#
  {#
    abline(h=0)#
    abline(h=2, col = "blue", lty = 2)#
    abline(h=10, col = "darkgreen", lty = 2)#
  }#
}
ref = 1#
test = 2#
statsObs = cbind(mp$quality$observed[[ref]][[test]][, -1], mp$preservation$observed[[ref]][[test]][, -1])#
statsZ = cbind(mp$quality$Z[[ref]][[test]][, -1], mp$preservation$Z[[ref]][[test]][, -1]);#
# Compare preservation to quality:#
print( cbind(statsObs[, c("medianRank.pres", "medianRank.qual")],#
             signif(statsZ[, c("Zsummary.pres", "Zsummary.qual")], 2)) )#
# Module labels and module sizes are also contained in the results#
modColors = rownames(mp$preservation$observed[[ref]][[test]])#
moduleSizes = mp$preservation$Z[[ref]][[test]][, 1];#
# leave grey and gold modules out#
plotMods = !(modColors %in% c("grey", "gold"));#
# Text labels for points#
text = modColors[plotMods];#
# Auxiliary convenience variable#
plotData = cbind(mp$preservation$observed[[ref]][[test]][, 2], mp$preservation$Z[[ref]][[test]][, 2])#
# Main titles for the plot#
mains = c("Preservation Median rank", "Preservation Zsummary");#
# Start the plot#
sizeGrWindow(10, 5);#
#pdf(fi="Plots/BxHLiverFemaleOnly-modulePreservation-Zsummary-medianRank.pdf", wi=10, h=5)#
par(mfrow = c(1,2))#
par(mar = c(4.5,4.5,2.5,1))#
for (p in 1:2)#
{#
  min = min(plotData[, p], na.rm = TRUE);#
  max = max(plotData[, p], na.rm = TRUE);#
  # Adjust ploting ranges appropriately#
  if (p==2)#
  {#
    if (min > -max/10) min = -max/10#
    ylim = c(min - 0.1 * (max-min), max + 0.1 * (max-min))#
  } else#
    ylim = c(max + 0.1 * (max-min), min - 0.1 * (max-min))#
  plot(moduleSizes[plotMods], plotData[plotMods, p], col = 1, bg = modColors[plotMods], pch = 21,#
       main = mains[p],#
       cex = 2.4,#
       ylab = mains[p], xlab = "Module size", log = "x",#
       ylim = ylim,#
       xlim = c(10, 2000), cex.lab = 1.2, cex.axis = 1.2, cex.main =1.4)#
  labelPoints(moduleSizes[plotMods], plotData[plotMods, p], text, cex = 1, offs = 0.08);#
  # For Zsummary, add threshold lines#
  if (p==2)#
  {#
    abline(h=0)#
    abline(h=2, col = "blue", lty = 2)#
    abline(h=10, col = "darkgreen", lty = 2)#
  }#
}
prepareDataWGCNA <- function (wt , ko , idx)#
{#
  all <- cbind (wt , ko [ , - c(1,2)])#
  filterLowExpressedGenes(logTransform(all) , 0.7 , 1) -> all_log_filtered#
  ##
  sapply(all_log_filtered$tracking_id %>% unique() %>% as.character(), function(x) {which (all_log_filtered$tracking_id == x)} ) -> hh #
  k = c()#
  for (i in 1:length(hh))#
  {#
    k = c(k , hh[[i]][1])#
  }#
  # remove dupliated rows#
  wt_expr <- all_log_filtered [ k, idx:dim(wt)[2]] # 8711 14#
  damaged_expr <- all_log_filtered [ k, - c(1:dim(wt)[2])] # 8711 8#
  rownames(wt_expr ) <- all_log_filtered$tracking_id %>% as.character() %>% unique()#
  colnames(wt_expr) <- colnames(all_log_filtered) [idx:dim(wt)[2]]#
  rownames(damaged_expr ) <- all_log_filtered$tracking_id %>% as.character() %>% unique()#
  colnames(damaged_expr) <- colnames(all_log_filtered) [( - c(1:dim(wt)[2]))]#
  wt_expr <- as.data.frame(t(wt_expr) )#
  damaged_expr <- as.data.frame(t(damaged_expr))#
  return (list (wt_expr , damaged_expr))#
}
datExprAll <- prepareDataWGCNA(FAP_WT , FAP_damaged , 3)#
#
wt_expr <- datExprAll[[1]]#
damaged_expr <- datExprAll[[2]]
setwd("~/Documents/Farnush github/Fabio Rossi/data/saved in R /")
load (file = "FAP_WT.RData")#
load (file = "FAP_damaged.RData")
datExprAll <- prepareDataWGCNA(FAP_WT , FAP_damaged , 3)#
#
wt_expr <- datExprAll[[1]]#
damaged_expr <- datExprAll[[2]]
powers = c(c(1:10), seq(from = 12, to=30, by=2))#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)#
sft_damaged = pickSoftThreshold(damaged_expr, powerVector = powers, verbose = 5)
save (sft_wt , "../../WGCNA/moulePreservation/FAP/sft_FAP_wt.RData")#
save (sft_damaged , "../../WGCNA/moulePreservation/FAP/sft_FAP_ko.RData")
save (sft_wt ,file= "../../WGCNA/moulePreservation/FAP/sft_FAP_wt.RData")#
save (sft_damaged , file =  "../../WGCNA/moulePreservation/FAP/sft_FAP_ko.RData")
plot_networkTopology (sft_wt) # 14
plot_networkTopology (sft_damaged)
plot_networkTopology (sft_wt) # 14
plot_networkTopology (sft_wt) # 14
plot_networkTopology (sft_damaged)
net_wt = blockwiseModules(wt_expr, power = 26, TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25,#
                       numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = "femaleMouseTOM", verbose = 3)#
#
net_damaged = blockwiseModules(damaged_expr, power = 24, TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25,#
                             numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = "femaleMouseTOM", verbose = 3)
save (net_wt ,file= "../../WGCNA/moulePreservation/FAP/net_FAP_wt.RData")#
save (net_damaged , file =  "../../WGCNA/moulePreservation/FAP/net_FAP_ko.RData")
nSets = 2;#
multiExpr = list();#
multiExpr[[1]] = list(data = wt_expr);#
multiExpr[[2]] = list(data = damaged_expr);#
setLabels = c("WT", "CCR2_KO");#
names(multiExpr) = setLabels
x = load("../../WGCNA/moulePreservation/FAP/FAP_wt_network.RData")#
color_wt <- moduleColors#
x = load("../../WGCNA/moulePreservation/FAP/FAP_damaged_network.RData")#
color_damaged <- moduleColors#
colorList = list(color_wt, color_damaged);#
names(colorList) = setLabels;
color_wt %>% length
color_wt %>% unique() %>% length
system.time( {#
  mp = modulePreservation(multiExpr, colorList,referenceNetworks = c(1:2),loadPermutedStatistics = FALSE,nPermutations = 200,verbose = 3)#
});
save(mp , "../../WGCNA/moulePreservation/FAP/mp.RData")
save(mp ,file= "../../WGCNA/moulePreservation/FAP/mp.RData")
datExprAll <- prepareDataWGCNA(muscleProgenitors_WT , muscleProgenitors_damaged , 2) # 7985
load ("muscleProgenitors_WT.RData")
load ("muscleProgenitors_damaged.RData")
datExprAll <- prepareDataWGCNA(muscleProgenitors_WT , muscleProgenitors_damaged , 2) # 7985
wt_expr <- datExprAll[[1]]#
damaged_expr <- datExprAll[[2]]#
#
powers = c(c(1:10), seq(from = 12, to=30, by=2))
dim (wt_expr)
powers = c(c(1:10), seq(from = 12, to=30, by=2))#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)#
sft_damaged = pickSoftThreshold(damaged_expr, powerVector = powers, verbose = 5)
save (sft_wt ,file= "../../WGCNA/moulePreservation/muscle/sft_muscle_wt.RData")#
save (sft_damaged , file =  "../../WGCNA/moulePreservation/muscle/sft_muscle_ko.RData")
powers = c(c(1:10), seq(from = 12, to=40, by=2))#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)#
sft_damaged = pickSoftThreshold(damaged_expr, powerVector = powers, verbose = 5)
save (sft_wt ,file= "../../WGCNA/moulePreservation/muscle/sft_muscle_wt.RData")#
save (sft_damaged , file =  "../../WGCNA/moulePreservation/muscle/sft_muscle_ko.RData")
plot_networkTopology (sft_wt)
load ("~/Documents/Farnush github/Fabio Rossi/WGCNA/moulePreservation/EC/sft_EC_ko.RData")
plot_networkTopology (sft_wt)
load ("~/Documents/Farnush github/Fabio Rossi/WGCNA/moulePreservation/EC/sft_EC_wt.RData")
plot_networkTopology (sft_wt)
powers = c(c(1:10), seq(from = 12, to=60, by=2))#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)#
sft_damaged = pickSoftThreshold(damaged_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
plot_networkTopology (sft_damaged)
dim (wt_expr)
dim (damaged_expr)
powers = c(c(1:10), seq(from = 12, to=200, by=2))#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
powers = c(c(1:10), seq(from = 12, to=800, by=10))#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
powers = c(c(1:10), seq(from = 12, to=1500, by=20))#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
powers = c(c(1:10), seq(from = 12, to=10000, by=50))#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
powers = seq (from = 10000 , to = 50000 , by = 200)#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
powers = seq (from = 50000 , to = 8000 , by = 500)#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
powers = seq (from = 50000 , to = 80000 , by = 500)#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
powers = seq (from = 50000 , to = 80000 , by = 500)#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
powers = seq (from = 100000 , to = 190000 , by = 500)#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
powers = seq (from = 115900 , to = 116020 , by = 5)#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
powers = seq (from = 115900 , to = 116100 , by = 5)#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
powers
powers = seq (from = 115800 , to = 116100 , by = 5)#
# Call the network topology analysis function#
#
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
powers
plot_networkTopology (sft_wt)
plot_networkTopology <- function (sft)#
{#
  # Plot the results:#
  sizeGrWindow(9, 5)#
  par(mfrow = c(1,2));#
  cex1 = 0.9;#
  # Scale-free topology fit index as a function of the soft-thresholding power#
  plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],#
       xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",#
       main = paste("Scale independence"));#
  text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],#
       labels=powers,cex=cex1,col="red");#
  # this line corresponds to using an R^2 cut-off of h#
  abline(h=0.8,col="red")#
  # Mean connectivity as a function of the soft-thresholding power#
  plot(sft$fitIndices[,1], sft$fitIndices[,5],#
       xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",#
       main = paste("Mean connectivity"))#
  text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")#
}
plot_networkTopology (sft_wt)
setwd("../data/saved in R /")#
load (file = "EC_WT.RData")#
load (file = "EC_damaged.RData")#
load (file = "FAP_WT.RData")#
load (file = "FAP_damaged.RData")#
load (file = "inflammatory_WT.RData")#
load (file = "muscleProgenitors_WT.RData")#
load (file = "muscleProgenitors_damaged.RData")
prepareDataWGCNA <- function (wt , ko , idx)#
{#
  all <- cbind (wt , ko [ , - c(1,2)])#
  filterLowExpressedGenes(logTransform(all) , 0.7 , 1) -> all_log_filtered#
  #remove isoforms#
  sapply(all_log_filtered$tracking_id %>% unique() %>% as.character(), function(x) {which (all_log_filtered$tracking_id == x)} ) -> hh #
  k = c()#
  for (i in 1:length(hh))#
  {#
    k = c(k , hh[[i]][1])#
  }#
  # remove dupliated rows#
  wt_expr <- all_log_filtered [ k, idx:dim(wt)[2]] # 8711 14#
  damaged_expr <- all_log_filtered [ k, - c(1:dim(wt)[2])] # 8711 8#
  rownames(wt_expr ) <- all_log_filtered$tracking_id %>% as.character() %>% unique()#
  colnames(wt_expr) <- colnames(all_log_filtered) [idx:dim(wt)[2]]#
  rownames(damaged_expr ) <- all_log_filtered$tracking_id %>% as.character() %>% unique()#
  colnames(damaged_expr) <- colnames(all_log_filtered) [( - c(1:dim(wt)[2]))]#
  wt_expr <- as.data.frame(t(wt_expr) )#
  damaged_expr <- as.data.frame(t(damaged_expr))#
  return (list (wt_expr , damaged_expr))#
}
datExprAll <- prepareDataWGCNA(EC_WT , EC_damaged , 3)
wt_expr <- datExprAll[[1]]#
damaged_expr <- datExprAll[[2]]#
#
powers = c(c(1:10), seq(from = 12, to=20, by=2))
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)#
sft_damaged = pickSoftThreshold(damaged_expr, powerVector = powers, verbose = 5)
#FAP 26 - EC 14#
plot_networkTopology (sft_wt)
plot_networkTopology (sft_damaged)
#FAP 26 - EC 14#
plot_networkTopology (sft_wt)
plot_networkTopology (sft_damaged)
powers = c(1:20)
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)#
sft_damaged = pickSoftThreshold(damaged_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
plot_networkTopology (sft_damaged)
save (sft_wt ,file= "../../WGCNA/moulePreservation/EC/sft_EC_wt.RData")#
save (sft_damaged , file =  "../../WGCNA/moulePreservation/EC/sft_EC_ko.RData")
save (sft_wt ,file= "../../WGCNA/moulePreservation/EC/sft_EC_wt.RData")#
save (sft_damaged , file =  "../../WGCNA/moulePreservation/EC/sft_EC_ko.RData")
net_wt = blockwiseModules(wt_expr, power = 13, TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25,#
                       numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = "femaleMouseTOM", verbose = 3)#
#
net_damaged = blockwiseModules(damaged_expr, power = 16 , TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25,#
                             numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = "femaleMouseTOM", verbose = 3)
save (net_wt ,file= "../../WGCNA/moulePreservation/EC/net_EC_wt.RData")#
save (net_wt ,file= "../../WGCNA/moulePreservation/EC/net_EC_ko.RData")
clusteringDendogramGenes(net_wt)
clusteringDendogramGenes(net_damaged)
plot_networkTopology (sft_wt)
plot_networkTopology (sft_damaged)
saveIt (net_wt , "../../WGCNA/moulePreservation/EC/network_wt.RData")#
saveIt (net_damaged , "../../WGCNA/moulePreservation/EC/network_ko.RData")
nSets = 2;#
multiExpr = list();#
multiExpr[[1]] = list(data = wt_expr);#
multiExpr[[2]] = list(data = damaged_expr);#
setLabels = c("WT", "CCR2_KO");#
names(multiExpr) = setLabels
x = load("../../WGCNA/moulePreservation/EC/network_wt.RData")
color_wt <- moduleColors
x = load("../../WGCNA/moulePreservation/EC/network_ko.RData")#
color_damaged <- moduleColors#
colorList = list(color_wt, color_damaged);#
names(colorList) = setLabels;
system.time( {#
  mp = modulePreservation(multiExpr, colorList,referenceNetworks = c(1:2),loadPermutedStatistics = FALSE,nPermutations = 200,verbose = 3)#
});
save(mp , file = "../../WGCNA/moulePreservation/EC/mp.RData")
datExprAll <- prepareDataWGCNA(FAP_WT , FAP_damaged , 3) # 7985
powers = c(1:20)
wt_expr <- datExprAll[[1]]#
damaged_expr <- datExprAll[[2]]
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)#
sft_damaged = pickSoftThreshold(damaged_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
powers = c(1:25)
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)#
sft_damaged = pickSoftThreshold(damaged_expr, powerVector = powers, verbose = 5)
plot_networkTopology (sft_wt)
plot_networkTopology (sft_damaged)
plot_networkTopology (sft_damaged)
plot_networkTopology (sft_wt)
save (sft_wt ,file= "../../WGCNA/moulePreservation/FAP/sft_FAP_wt.RData")#
save (sft_damaged , file =  "../../WGCNA/moulePreservation/FAP/sft_FAP_ko.RData")
net_wt = blockwiseModules(wt_expr, power = 25, TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25,#
                       numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = "femaleMouseTOM", verbose = 3)#
#
net_damaged = blockwiseModules(damaged_expr, power = 22 , TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25,#
                             numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = "femaleMouseTOM", verbose = 3)
save (net_wt ,file= "../../WGCNA/moulePreservation/FAP/net_FAP_wt.RData")#
save (net_damaged , file =  "../../WGCNA/moulePreservation/FAP/net_FAP_ko.RData")
clusteringDendogramGenes(net_wt)
clusteringDendogramGenes(net_wt)
clusteringDendogramGenes(net_damaged)
saveIt (net_wt , "../../WGCNA/moulePreservation/FAP/network_wt.RData")#
saveIt (net_damaged , "../../WGCNA/moulePreservation/FAP/network_ko.RData")
nSets = 2;#
multiExpr = list();#
multiExpr[[1]] = list(data = wt_expr);#
multiExpr[[2]] = list(data = damaged_expr);#
setLabels = c("WT", "CCR2_KO");#
names(multiExpr) = setLabels
x = load("../../WGCNA/moulePreservation/FAP/network_wt.RData")#
color_wt <- moduleColors
x = load("../../WGCNA/moulePreservation/FAP/network_ko.RData")
color_damaged <- moduleColors#
colorList = list(color_wt, color_damaged);#
names(colorList) = setLabels;
system.time( {#
  mp = modulePreservation(multiExpr, colorList,referenceNetworks = c(1:2),loadPermutedStatistics = FALSE,nPermutations = 200,verbose = 3)#
});
save(mp , file = "../../WGCNA/moulePreservation/FAP/mp.RData")
datExprAll <- prepareDataWGCNA(muscleProgenitors_WT , muscleProgenitors_damaged , 2) # 8563
wt_expr <- datExprAll[[1]]#
damaged_expr <- datExprAll[[2]]
powers = c(1:25)
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
powers = seq (from = 10 , to = 100 , by = 5)
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
sft_damaged = pickSoftThreshold(damaged_expr, powerVector = powers, verbose = 5)
load (file = "../../WGCNA/moulePreservation/EC/mp.RData")
ref = 1#
test = 2#
statsObs = cbind(mp$quality$observed[[ref]][[test]][, -1], mp$preservation$observed[[ref]][[test]][, -1])#
statsZ = cbind(mp$quality$Z[[ref]][[test]][, -1], mp$preservation$Z[[ref]][[test]][, -1]);#
# Compare preservation to quality:#
print( cbind(statsObs[, c("medianRank.pres", "medianRank.qual")],#
             signif(statsZ[, c("Zsummary.pres", "Zsummary.qual")], 2)) )#
# Module labels and module sizes are also contained in the results#
modColors = rownames(mp$preservation$observed[[ref]][[test]])#
moduleSizes = mp$preservation$Z[[ref]][[test]][, 1];#
# leave grey and gold modules out#
plotMods = !(modColors %in% c("grey", "gold"));#
# Text labels for points#
text = modColors[plotMods];#
# Auxiliary convenience variable#
plotData = cbind(mp$preservation$observed[[ref]][[test]][, 2], mp$preservation$Z[[ref]][[test]][, 2])#
# Main titles for the plot#
mains = c("Preservation Median rank", "Preservation Zsummary");#
# Start the plot#
sizeGrWindow(10, 5);#
#pdf(fi="Plots/BxHLiverFemaleOnly-modulePreservation-Zsummary-medianRank.pdf", wi=10, h=5)#
par(mfrow = c(1,2))#
par(mar = c(4.5,4.5,2.5,1))#
for (p in 1:2)#
{#
  min = min(plotData[, p], na.rm = TRUE);#
  max = max(plotData[, p], na.rm = TRUE);#
  # Adjust ploting ranges appropriately#
  if (p==2)#
  {#
    if (min > -max/10) min = -max/10#
    ylim = c(min - 0.1 * (max-min), max + 0.1 * (max-min))#
  } else#
    ylim = c(max + 0.1 * (max-min), min - 0.1 * (max-min))#
  plot(moduleSizes[plotMods], plotData[plotMods, p], col = 1, bg = modColors[plotMods], pch = 21,#
       main = mains[p],#
       cex = 2.4,#
       ylab = mains[p], xlab = "Module size", log = "x",#
       ylim = ylim,#
       xlim = c(10, 2000), cex.lab = 1.2, cex.axis = 1.2, cex.main =1.4)#
  labelPoints(moduleSizes[plotMods], plotData[plotMods, p], text, cex = 1, offs = 0.08);#
  # For Zsummary, add threshold lines#
  if (p==2)#
  {#
    abline(h=0)#
    abline(h=2, col = "blue", lty = 2)#
    abline(h=10, col = "darkgreen", lty = 2)#
  }#
}
ref = 2#
test = 1#
statsObs = cbind(mp$quality$observed[[ref]][[test]][, -1], mp$preservation$observed[[ref]][[test]][, -1])#
statsZ = cbind(mp$quality$Z[[ref]][[test]][, -1], mp$preservation$Z[[ref]][[test]][, -1]);#
# Compare preservation to quality:#
print( cbind(statsObs[, c("medianRank.pres", "medianRank.qual")],#
             signif(statsZ[, c("Zsummary.pres", "Zsummary.qual")], 2)) )#
# Module labels and module sizes are also contained in the results#
modColors = rownames(mp$preservation$observed[[ref]][[test]])#
moduleSizes = mp$preservation$Z[[ref]][[test]][, 1];#
# leave grey and gold modules out#
plotMods = !(modColors %in% c("grey", "gold"));#
# Text labels for points#
text = modColors[plotMods];#
# Auxiliary convenience variable#
plotData = cbind(mp$preservation$observed[[ref]][[test]][, 2], mp$preservation$Z[[ref]][[test]][, 2])#
# Main titles for the plot#
mains = c("Preservation Median rank", "Preservation Zsummary");#
# Start the plot#
sizeGrWindow(10, 5);#
#pdf(fi="Plots/BxHLiverFemaleOnly-modulePreservation-Zsummary-medianRank.pdf", wi=10, h=5)#
par(mfrow = c(1,2))#
par(mar = c(4.5,4.5,2.5,1))#
for (p in 1:2)#
{#
  min = min(plotData[, p], na.rm = TRUE);#
  max = max(plotData[, p], na.rm = TRUE);#
  # Adjust ploting ranges appropriately#
  if (p==2)#
  {#
    if (min > -max/10) min = -max/10#
    ylim = c(min - 0.1 * (max-min), max + 0.1 * (max-min))#
  } else#
    ylim = c(max + 0.1 * (max-min), min - 0.1 * (max-min))#
  plot(moduleSizes[plotMods], plotData[plotMods, p], col = 1, bg = modColors[plotMods], pch = 21,#
       main = mains[p],#
       cex = 2.4,#
       ylab = mains[p], xlab = "Module size", log = "x",#
       ylim = ylim,#
       xlim = c(10, 2000), cex.lab = 1.2, cex.axis = 1.2, cex.main =1.4)#
  labelPoints(moduleSizes[plotMods], plotData[plotMods, p], text, cex = 1, offs = 0.08);#
  # For Zsummary, add threshold lines#
  if (p==2)#
  {#
    abline(h=0)#
    abline(h=2, col = "blue", lty = 2)#
    abline(h=10, col = "darkgreen", lty = 2)#
  }#
}
load (file = "../../WGCNA/moulePreservation/FAP/mp.RData")
ref = 2#
test = 1#
statsObs = cbind(mp$quality$observed[[ref]][[test]][, -1], mp$preservation$observed[[ref]][[test]][, -1])#
statsZ = cbind(mp$quality$Z[[ref]][[test]][, -1], mp$preservation$Z[[ref]][[test]][, -1]);#
# Compare preservation to quality:#
print( cbind(statsObs[, c("medianRank.pres", "medianRank.qual")],#
             signif(statsZ[, c("Zsummary.pres", "Zsummary.qual")], 2)) )#
# Module labels and module sizes are also contained in the results#
modColors = rownames(mp$preservation$observed[[ref]][[test]])#
moduleSizes = mp$preservation$Z[[ref]][[test]][, 1];#
# leave grey and gold modules out#
plotMods = !(modColors %in% c("grey", "gold"));#
# Text labels for points#
text = modColors[plotMods];#
# Auxiliary convenience variable#
plotData = cbind(mp$preservation$observed[[ref]][[test]][, 2], mp$preservation$Z[[ref]][[test]][, 2])#
# Main titles for the plot#
mains = c("Preservation Median rank", "Preservation Zsummary");#
# Start the plot#
sizeGrWindow(10, 5);#
#pdf(fi="Plots/BxHLiverFemaleOnly-modulePreservation-Zsummary-medianRank.pdf", wi=10, h=5)#
par(mfrow = c(1,2))#
par(mar = c(4.5,4.5,2.5,1))#
for (p in 1:2)#
{#
  min = min(plotData[, p], na.rm = TRUE);#
  max = max(plotData[, p], na.rm = TRUE);#
  # Adjust ploting ranges appropriately#
  if (p==2)#
  {#
    if (min > -max/10) min = -max/10#
    ylim = c(min - 0.1 * (max-min), max + 0.1 * (max-min))#
  } else#
    ylim = c(max + 0.1 * (max-min), min - 0.1 * (max-min))#
  plot(moduleSizes[plotMods], plotData[plotMods, p], col = 1, bg = modColors[plotMods], pch = 21,#
       main = mains[p],#
       cex = 2.4,#
       ylab = mains[p], xlab = "Module size", log = "x",#
       ylim = ylim,#
       xlim = c(10, 2000), cex.lab = 1.2, cex.axis = 1.2, cex.main =1.4)#
  labelPoints(moduleSizes[plotMods], plotData[plotMods, p], text, cex = 1, offs = 0.08);#
  # For Zsummary, add threshold lines#
  if (p==2)#
  {#
    abline(h=0)#
    abline(h=2, col = "blue", lty = 2)#
    abline(h=10, col = "darkgreen", lty = 2)#
  }#
}
ref = 1#
test = 2#
statsObs = cbind(mp$quality$observed[[ref]][[test]][, -1], mp$preservation$observed[[ref]][[test]][, -1])#
statsZ = cbind(mp$quality$Z[[ref]][[test]][, -1], mp$preservation$Z[[ref]][[test]][, -1]);#
# Compare preservation to quality:#
print( cbind(statsObs[, c("medianRank.pres", "medianRank.qual")],#
             signif(statsZ[, c("Zsummary.pres", "Zsummary.qual")], 2)) )#
# Module labels and module sizes are also contained in the results#
modColors = rownames(mp$preservation$observed[[ref]][[test]])#
moduleSizes = mp$preservation$Z[[ref]][[test]][, 1];#
# leave grey and gold modules out#
plotMods = !(modColors %in% c("grey", "gold"));#
# Text labels for points#
text = modColors[plotMods];#
# Auxiliary convenience variable#
plotData = cbind(mp$preservation$observed[[ref]][[test]][, 2], mp$preservation$Z[[ref]][[test]][, 2])#
# Main titles for the plot#
mains = c("Preservation Median rank", "Preservation Zsummary");#
# Start the plot#
sizeGrWindow(10, 5);#
#pdf(fi="Plots/BxHLiverFemaleOnly-modulePreservation-Zsummary-medianRank.pdf", wi=10, h=5)#
par(mfrow = c(1,2))#
par(mar = c(4.5,4.5,2.5,1))#
for (p in 1:2)#
{#
  min = min(plotData[, p], na.rm = TRUE);#
  max = max(plotData[, p], na.rm = TRUE);#
  # Adjust ploting ranges appropriately#
  if (p==2)#
  {#
    if (min > -max/10) min = -max/10#
    ylim = c(min - 0.1 * (max-min), max + 0.1 * (max-min))#
  } else#
    ylim = c(max + 0.1 * (max-min), min - 0.1 * (max-min))#
  plot(moduleSizes[plotMods], plotData[plotMods, p], col = 1, bg = modColors[plotMods], pch = 21,#
       main = mains[p],#
       cex = 2.4,#
       ylab = mains[p], xlab = "Module size", log = "x",#
       ylim = ylim,#
       xlim = c(10, 2000), cex.lab = 1.2, cex.axis = 1.2, cex.main =1.4)#
  labelPoints(moduleSizes[plotMods], plotData[plotMods, p], text, cex = 1, offs = 0.08);#
  # For Zsummary, add threshold lines#
  if (p==2)#
  {#
    abline(h=0)#
    abline(h=2, col = "blue", lty = 2)#
    abline(h=10, col = "darkgreen", lty = 2)#
  }#
}
powers = seq (from = 100 , to = 1000 , by = 5)
sft_wt = pickSoftThreshold(wt_expr, powerVector = powers, verbose = 5)
source("https://bioconductor.org/biocLite.R")#
biocLite("KEGGSOAP")
version
